// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
`ifdef PRINTF_COND
`define PRINTF_COND_ (`PRINTF_COND)
`else  // PRINTF_COND
`define PRINTF_COND_ 1
`endif  // PRINTF_COND
`endif  // not def PRINTF_COND_

module IF (
    input         clock,
    reset,
    output [31:0] io_irom_addr,
    input  [31:0] io_irom_inst,
    output [31:0] io_out_inst,
    io_out_pc,
    output        io_out_valid,
    input  [ 2:0] io_jmp_op,
    input  [31:0] io_jmp_imm,
    io_jmp_pc,
    io_jmp_rs1_v,
    io_br_exe_br_pc,
    io_br_exe_br_imm,
    input         io_br_exe_br_br_flag,
    io_br_id_isBr,
    io_ld_hazard_happened,
    input  [31:0] io_ld_hazard_pc
);

  reg [31:0] pc;
  always @(posedge clock) begin
    if (reset) pc <= 32'h0;
    else
    if (io_br_id_isBr) begin
    end else if (io_br_exe_br_br_flag) pc <= io_br_exe_br_pc + io_br_exe_br_imm;
    else if (io_jmp_op == 3'h1) pc <= io_jmp_pc + io_jmp_imm;
    else if (io_jmp_op == 3'h2) pc <= io_jmp_rs1_v + io_jmp_imm & 32'hFFFFFFFE;
    else if (io_jmp_op == 3'h3) pc <= 32'h1C090000;
    else if (io_ld_hazard_happened) pc <= io_ld_hazard_pc;
    else pc <= pc + 32'h4;
  end  // always @(posedge)
  assign io_irom_addr = io_ld_hazard_happened ? io_ld_hazard_pc : pc;
  assign io_out_inst = io_br_exe_br_br_flag | io_br_id_isBr | (|io_jmp_op) ? 32'h13 : io_irom_inst;
  assign io_out_pc = pc;
  assign io_out_valid =
    ~(io_ld_hazard_happened | io_br_exe_br_br_flag | io_br_id_isBr) & ~(|io_jmp_op);
endmodule

module CU (
    input  [31:0] io_inst,
    output [ 3:0] io_alu_ctrl_calc,
    output [ 1:0] io_alu_ctrl_op1_sel,
    io_alu_ctrl_op2_sel,
    output [ 2:0] io_bru_op,
    io_jmp_op,
    output [ 1:0] io_wb_sel,
    output        io_wb_wen,
    output [ 3:0] io_mem,
    output [31:0] io_imm
);

  wire [9:0] _GEN = {io_inst[14:12], io_inst[6:0]};
  wire _GEN_0 = _GEN == 10'h123;
  wire _GEN_1 = _GEN == 10'hA3;
  wire _GEN_2 = _GEN == 10'h23;
  wire _GEN_3 = _GEN == 10'h3;
  wire _GEN_4 = _GEN == 10'h203;
  wire _GEN_5 = _GEN == 10'h83;
  wire _GEN_6 = _GEN == 10'h283;
  wire _GEN_7 = _GEN == 10'h103;
  wire _GEN_8 = _GEN_7 | _GEN_6 | _GEN_5 | _GEN_4 | _GEN_3 | _GEN_2 | _GEN_1 | _GEN_0;
  wire [16:0] _GEN_9 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};
  wire _GEN_10 = _GEN_9 == 17'h33;
  wire _GEN_11 = _GEN_10 | _GEN_8;
  wire _GEN_12 = _GEN_9 == 17'h8033;
  wire _GEN_13 = _GEN_9 == 17'h3B3;
  wire _GEN_14 = _GEN_9 == 17'h333;
  wire _GEN_15 = _GEN_9 == 17'h233;
  wire _GEN_16 = _GEN_9 == 17'hB3;
  wire _GEN_17 = _GEN_9 == 17'h2B3;
  wire _GEN_18 = _GEN_9 == 17'h82B3;
  wire _GEN_19 = _GEN_9 == 17'h133;
  wire _GEN_20 = _GEN_9 == 17'h1B3;
  wire        _GEN_21 =
    _GEN_20 | _GEN_19 | _GEN_18 | _GEN_17 | _GEN_16 | _GEN_15 | _GEN_14 | _GEN_13
    | _GEN_12 | _GEN_10;
  wire _GEN_22 = _GEN == 10'h13;
  wire _GEN_23 = _GEN == 10'h393;
  wire _GEN_24 = _GEN == 10'h313;
  wire _GEN_25 = _GEN == 10'h213;
  wire [15:0] _GEN_26 = {io_inst[31:26], io_inst[14:12], io_inst[6:0]};
  wire _GEN_27 = _GEN_26 == 16'h93;
  wire _GEN_28 = _GEN_26 == 16'h293;
  wire _GEN_29 = _GEN_26 == 16'h4293;
  wire _GEN_30 = _GEN == 10'h113;
  wire _GEN_31 = _GEN == 10'h193;
  wire _GEN_32 = _GEN == 10'h63;
  wire _GEN_33 = _GEN == 10'hE3;
  wire _GEN_34 = _GEN == 10'h2E3;
  wire _GEN_35 = _GEN == 10'h3E3;
  wire _GEN_36 = _GEN == 10'h263;
  wire _GEN_37 = _GEN == 10'h363;
  wire _GEN_38 = _GEN == 10'h67;
  wire _GEN_39 = io_inst[6:0] == 7'h6F;
  wire _GEN_40 = io_inst[6:0] == 7'h37;
  wire _GEN_41 = io_inst[6:0] == 7'h17;
  wire _GEN_42 = _GEN_41 | _GEN_40;
  assign io_alu_ctrl_calc =
    _GEN_42
      ? 4'h1
      : _GEN_31
          ? 4'hA
          : _GEN_30
              ? 4'h9
              : _GEN_29
                  ? 4'h8
                  : _GEN_28
                      ? 4'h7
                      : _GEN_27
                          ? 4'h6
                          : _GEN_25
                              ? 4'h5
                              : _GEN_24
                                  ? 4'h4
                                  : _GEN_23
                                      ? 4'h3
                                      : _GEN_22
                                          ? 4'h1
                                          : _GEN_20
                                              ? 4'hA
                                              : _GEN_19
                                                  ? 4'h9
                                                  : _GEN_18
                                                      ? 4'h8
                                                      : _GEN_17
                                                          ? 4'h7
                                                          : _GEN_16
                                                              ? 4'h6
                                                              : _GEN_15
                                                                  ? 4'h5
                                                                  : _GEN_14
                                                                      ? 4'h4
                                                                      : _GEN_13
                                                                          ? 4'h3
                                                                          : _GEN_12
                                                                              ? 4'h2
                                                                              : {3'h0,
                                                                                 _GEN_11};
  assign io_alu_ctrl_op1_sel =
    _GEN_41
      ? 2'h2
      : _GEN_40
          ? 2'h0
          : {1'h0,
             _GEN_31 | _GEN_30 | _GEN_29 | _GEN_28 | _GEN_27 | _GEN_25 | _GEN_24 | _GEN_23
               | _GEN_22 | _GEN_20 | _GEN_19 | _GEN_18 | _GEN_17 | _GEN_16 | _GEN_15
               | _GEN_14 | _GEN_13 | _GEN_12 | _GEN_11};
  assign io_alu_ctrl_op2_sel =
    _GEN_41 | _GEN_40 | _GEN_31 | _GEN_30 | _GEN_29 | _GEN_28 | _GEN_27 | _GEN_25
    | _GEN_24 | _GEN_23 | _GEN_22
      ? 2'h1
      : _GEN_21 ? 2'h2 : {1'h0, _GEN_8};
  assign io_bru_op =
    _GEN_37
      ? 3'h2
      : _GEN_36
          ? 3'h1
          : _GEN_35 ? 3'h4 : _GEN_34 ? 3'h3 : _GEN_33 ? 3'h6 : _GEN_32 ? 3'h5 : 3'h0;
  assign io_jmp_op = _GEN_39 ? 3'h1 : {1'h0, _GEN_38, 1'h0};
  assign io_wb_sel =
    _GEN_42
      ? 2'h1
      : _GEN_39 | _GEN_38
          ? 2'h3
          : _GEN_31 | _GEN_30 | _GEN_29 | _GEN_28 | _GEN_27 | _GEN_25 | _GEN_24 | _GEN_23
            | _GEN_22 | _GEN_21
              ? 2'h1
              : {_GEN_7 | _GEN_6 | _GEN_5 | _GEN_4 | _GEN_3, 1'h0};
  assign io_wb_wen =
    _GEN_41 | _GEN_40 | _GEN_39 | _GEN_38 | _GEN_31 | _GEN_30 | _GEN_29 | _GEN_28
    | _GEN_27 | _GEN_25 | _GEN_24 | _GEN_23 | _GEN_22 | _GEN_20 | _GEN_19 | _GEN_18
    | _GEN_17 | _GEN_16 | _GEN_15 | _GEN_14 | _GEN_13 | _GEN_12 | _GEN_10 | _GEN_7
    | _GEN_6 | _GEN_5 | _GEN_4 | _GEN_3;
  assign io_mem =
    _GEN_7
      ? 4'h3
      : _GEN_6
          ? 4'h5
          : _GEN_5
              ? 4'h2
              : _GEN_4
                  ? 4'h4
                  : _GEN_3 ? 4'h1 : _GEN_2 ? 4'h6 : _GEN_1 ? 4'h7 : {_GEN_0, 3'h0};
  assign io_imm =
    _GEN_41
      ? {io_inst[31:12], 12'h0}
      : _GEN_40
          ? {io_inst[31:12], 12'h0}
          : _GEN_39
              ? {{12{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}
              : _GEN_38
                  ? {{20{io_inst[31]}}, io_inst[31:20]}
                  : _GEN_37
                      ? {{20{io_inst[31]}},
                         io_inst[7],
                         io_inst[30:25],
                         io_inst[11:8],
                         1'h0}
                      : _GEN_36
                          ? {{20{io_inst[31]}},
                             io_inst[7],
                             io_inst[30:25],
                             io_inst[11:8],
                             1'h0}
                          : _GEN_35
                              ? {{20{io_inst[31]}},
                                 io_inst[7],
                                 io_inst[30:25],
                                 io_inst[11:8],
                                 1'h0}
                              : _GEN_34
                                  ? {{20{io_inst[31]}},
                                     io_inst[7],
                                     io_inst[30:25],
                                     io_inst[11:8],
                                     1'h0}
                                  : _GEN_33
                                      ? {{20{io_inst[31]}},
                                         io_inst[7],
                                         io_inst[30:25],
                                         io_inst[11:8],
                                         1'h0}
                                      : _GEN_32
                                          ? {{20{io_inst[31]}},
                                             io_inst[7],
                                             io_inst[30:25],
                                             io_inst[11:8],
                                             1'h0}
                                          : _GEN_31
                                              ? {{20{io_inst[31]}}, io_inst[31:20]}
                                              : _GEN_30
                                                  ? {{20{io_inst[31]}}, io_inst[31:20]}
                                                  : _GEN_29
                                                      ? {{20{io_inst[31]}},
                                                         io_inst[31:20]}
                                                      : _GEN_28
                                                          ? {{20{io_inst[31]}},
                                                             io_inst[31:20]}
                                                          : _GEN_27
                                                              ? {{20{io_inst[31]}},
                                                                 io_inst[31:20]}
                                                              : _GEN_25
                                                                  ? {{20{io_inst[31]}},
                                                                     io_inst[31:20]}
                                                                  : _GEN_24
                                                                      ? {{20{io_inst[31]}},
                                                                         io_inst[31:20]}
                                                                      : _GEN_23
                                                                          ? {{20{io_inst[31]}},
                                                                             io_inst[31:20]}
                                                                          : _GEN_22
                                                                              ? {{20{io_inst[31]}},
                                                                                 io_inst[31:20]}
                                                                              : _GEN_7
                                                                                  ? {{20{io_inst[31]}},
                                                                                     io_inst[31:20]}
                                                                                  : _GEN_6
                                                                                      ? {{20{io_inst[31]}},
                                                                                         io_inst[31:20]}
                                                                                      : _GEN_5
                                                                                          ? {{20{io_inst[31]}},
                                                                                             io_inst[31:20]}
                                                                                          : _GEN_4
                                                                                              ? {{20{io_inst[31]}},
                                                                                                 io_inst[31:20]}
                                                                                              : _GEN_3
                                                                                                  ? {{20{io_inst[31]}},
                                                                                                     io_inst[31:20]}
                                                                                                  : _GEN_2
                                                                                                      ? {{20{io_inst[31]}},
                                                                                                         io_inst[31:25],
                                                                                                         io_inst[11:7]}
                                                                                                      : _GEN_1
                                                                                                          ? {{20{io_inst[31]}},
                                                                                                             io_inst[31:25],
                                                                                                             io_inst[11:7]}
                                                                                                          : _GEN_0
                                                                                                              ? {{20{io_inst[31]}},
                                                                                                                 io_inst[31:25],
                                                                                                                 io_inst[11:7]}
                                                                                                              : 32'h0;
endmodule

// VCS coverage exclude_file
module _rf_32x32 (
    input  [ 4:0] R0_addr,
    input         R0_en,
    R0_clk,
    output [31:0] R0_data,
    input  [ 4:0] R1_addr,
    input         R1_en,
    R1_clk,
    output [31:0] R1_data,
    input  [ 4:0] W0_addr,
    input         W0_en,
    W0_clk,
    input  [31:0] W0_data
);

  reg [31:0] Memory[0:31];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1) Memory[W0_addr] <= W0_data;
  end  // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;
endmodule

module RegFile (
    input         clock,
    input  [ 4:0] io_read_rs1_i,
    output [31:0] io_read_rs1_v,
    input  [ 4:0] io_read_rs2_i,
    output [31:0] io_read_rs2_v,
    input  [ 4:0] io_write_rd_i,
    input  [31:0] io_write_wdata,
    input         io_write_wen,
    io_write_valid
);

  wire [31:0] __rf_ext_R0_data;
  wire [31:0] __rf_ext_R1_data;
  _rf_32x32 _rf_ext (
      .R0_addr(io_read_rs2_i),
      .R0_en  (1'h1),
      .R0_clk (clock),
      .R0_data(__rf_ext_R0_data),
      .R1_addr(io_read_rs1_i),
      .R1_en  (1'h1),
      .R1_clk (clock),
      .R1_data(__rf_ext_R1_data),
      .W0_addr(io_write_rd_i),
      .W0_en  (io_write_valid & io_write_wen & (|io_write_rd_i)),
      .W0_clk (clock),
      .W0_data(io_write_wdata)
  );
  assign io_read_rs1_v =
    io_read_rs1_i == 5'h0
      ? 32'h0
      : io_write_valid & io_write_wen & io_write_rd_i == io_read_rs1_i
          ? io_write_wdata
          : __rf_ext_R1_data;
  assign io_read_rs2_v =
    io_read_rs2_i == 5'h0
      ? 32'h0
      : io_write_valid & io_write_wen & io_write_rd_i == io_read_rs2_i
          ? io_write_wdata
          : __rf_ext_R0_data;
endmodule

module ALU (
    input  [31:0] io_op1_v,
    io_op2_v,
    input  [ 3:0] io_alu_op,
    output [31:0] io_out
);

  wire [62:0] _io_out_T_16 = {31'h0, io_op1_v} << io_op2_v[4:0];
  wire [15:0][31:0] _GEN = {
    {32'h0},
    {32'h0},
    {32'h0},
    {32'h0},
    {32'h0},
    {{31'h0, io_op1_v < io_op2_v}},
    {{31'h0, $signed(io_op1_v) < $signed(io_op2_v)}},
    {$signed($signed(io_op1_v) >>> io_op2_v[4:0])},
    {io_op1_v >> io_op2_v[4:0]},
    {_io_out_T_16[31:0]},
    {io_op1_v ^ io_op2_v},
    {io_op1_v | io_op2_v},
    {io_op1_v & io_op2_v},
    {io_op1_v - io_op2_v},
    {io_op1_v + io_op2_v},
    {32'h0}
  };
  assign io_out = _GEN[io_alu_op];
endmodule

module BRU (
    input  [ 2:0] io_in_bru_op,
    input  [31:0] io_in_rs1_v,
    io_in_rs2_v,
    output        io_br_flag
);

  wire _GEN = io_in_bru_op == 3'h6 & io_in_rs1_v != io_in_rs2_v;
  wire [7:0] _GEN_0 = {
    {_GEN},
    {_GEN},
    {io_in_rs1_v == io_in_rs2_v},
    {io_in_rs1_v >= io_in_rs2_v},
    {$signed(io_in_rs1_v) >= $signed(io_in_rs2_v)},
    {io_in_rs1_v < io_in_rs2_v},
    {$signed(io_in_rs1_v) < $signed(io_in_rs2_v)},
    {_GEN}
  };
  assign io_br_flag = _GEN_0[io_in_bru_op];
endmodule

module MemU (
    input         clock,
    reset,
    input  [ 3:0] io_in_op,
    input  [31:0] io_in_addr,
    io_in_wdata,
    output [31:0] io_bus_addr,
    input  [31:0] io_bus_rdata,
    output [ 3:0] io_bus_wen,
    output [31:0] io_bus_wdata,
    input         io_valid,
    output [31:0] io_rdata
);

  wire _GEN = io_in_op == 4'h1;
  wire [3:0][7:0] _GEN_0 = {
    {io_bus_rdata[31:24]}, {io_bus_rdata[23:16]}, {io_bus_rdata[15:8]}, {io_bus_rdata[7:0]}
  };
  wire [7:0] _GEN_1 = _GEN_0[io_in_addr[1:0]];
  wire _GEN_2 = io_in_op == 4'h2;
  wire _GEN_3 = io_in_addr[1:0] == 2'h2;
  wire _GEN_4 = ~(|(io_in_addr[1:0])) | _GEN_3;
  wire [7:0] _GEN_5 = _GEN_0[io_in_addr[1:0]+2'h1];
  wire _GEN_6 = io_in_op == 4'h3;
  wire _GEN_7 = io_in_op == 4'h4;
  wire _GEN_8 = io_in_op == 4'h5;
  wire _GEN_9 = io_in_op == 4'h6;
  wire _GEN_10 = io_in_addr[1:0] == 2'h1;
  wire _GEN_11 = io_in_op == 4'h7;
  wire _GEN_12 = ~(|(io_in_addr[1:0])) & io_valid;
  wire _GEN_13 = ~(|io_in_op) | _GEN | _GEN_2 | _GEN_6 | _GEN_7 | _GEN_8;
  wire _GEN_14 = io_in_op == 4'h8;
`ifndef SYNTHESIS
  always @(posedge clock) begin
    automatic logic _GEN_15 = (|io_in_op) & ~_GEN;
    automatic logic _GEN_16 = _GEN_15 & ~_GEN_2;
    automatic logic _GEN_17 = _GEN_16 & ~_GEN_6 & ~_GEN_7;
    automatic logic _GEN_18 = _GEN_17 & ~_GEN_8 & ~_GEN_9;
    if ((`PRINTF_COND_) & _GEN_15 & _GEN_2 & ~_GEN_4 & ~reset)
      $fwrite(32'h80000002, "Unaligned memory access at %x\n", io_in_addr);
    if ((`PRINTF_COND_) & _GEN_16 & _GEN_6 & (|(io_in_addr[1:0])) & ~reset)
      $fwrite(32'h80000002, "Unaligned memory access at %x\n", io_in_addr);
    if ((`PRINTF_COND_) & _GEN_17 & _GEN_8 & ~_GEN_4 & ~reset)
      $fwrite(32'h80000002, "Unaligned memory access at %x\n", io_in_addr);
    if ((`PRINTF_COND_) & _GEN_18 & _GEN_11 & (_GEN_10 | (&(io_in_addr[1:0]))) & ~reset)
      $fwrite(32'h80000002, "Unaligned memory access at %x\n", io_in_addr);
    if ((`PRINTF_COND_) & _GEN_18 & ~_GEN_11 & _GEN_14 & (|(io_in_addr[1:0])) & ~reset)
      $fwrite(32'h80000002, "Unaligned memory access at %x\n", io_in_addr);
  end  // always @(posedge)
`endif  // not def SYNTHESIS
  assign io_bus_addr = {io_in_addr[31:2], 2'h0};
  assign io_bus_wen =
    _GEN_13
      ? 4'h0
      : _GEN_9
          ? (io_valid ? 4'h1 << io_in_addr[1:0] : 4'h0)
          : _GEN_11
              ? (_GEN_3 ? (io_valid ? 4'hC : 4'h0) : _GEN_12 ? 4'h3 : 4'h0)
              : {4{_GEN_14 & _GEN_12}};
  assign io_bus_wdata =
    _GEN_13
      ? io_in_wdata
      : _GEN_9
          ? {(&(io_in_addr[1:0])) ? io_in_wdata[7:0] : 8'h0,
             _GEN_3 ? io_in_wdata[7:0] : 8'h0,
             _GEN_10 ? io_in_wdata[7:0] : 8'h0,
             (|(io_in_addr[1:0])) ? 8'h0 : io_in_wdata[7:0]}
          : _GEN_11
              ? (_GEN_3
                   ? {io_in_wdata[15:0], 16'h0}
                   : (|(io_in_addr[1:0])) ? io_in_wdata : {16'h0, io_in_wdata[15:0]})
              : io_in_wdata;
  assign io_rdata =
    (|io_in_op)
      ? (_GEN
           ? {{24{_GEN_1[7]}}, _GEN_1}
           : _GEN_2
               ? (_GEN_4 ? {{16{_GEN_5[7]}}, _GEN_5, _GEN_1} : 32'h0)
               : _GEN_6
                   ? ((|(io_in_addr[1:0])) ? 32'h0 : io_bus_rdata)
                   : _GEN_7
                       ? {24'h0, _GEN_1}
                       : _GEN_8 & _GEN_4
                           ? {16'h0, _GEN_0[io_in_addr[1:0] + 2'h1], _GEN_1}
                           : 32'h0)
      : 32'h0;
endmodule

module CPUCore (
    input         clock,
    reset,
    output [31:0] io_irom_addr,
    input  [31:0] io_irom_inst,
    output [31:0] io_bus_addr,
    input  [31:0] io_bus_rdata,
    output [ 3:0] io_bus_wen,
    output [31:0] io_bus_wdata,
    output        io_dbg_wb_have_inst,
    output [31:0] io_dbg_wb_pc,
    output        io_dbg_wb_ena,
    output [ 4:0] io_dbg_wb_reg,
    output [31:0] io_dbg_wb_value,
    output        io_dbg_inst_valid
);

  wire [31:0] _mem__io_rdata;
  wire _bru__io_br_flag;
  wire [31:0] _alu__io_out;
  wire [31:0] _regfile__io_read_rs1_v;
  wire [31:0] _regfile__io_read_rs2_v;
  wire [3:0] _cu__io_alu_ctrl_calc;
  wire [1:0] _cu__io_alu_ctrl_op1_sel;
  wire [1:0] _cu__io_alu_ctrl_op2_sel;
  wire [2:0] _cu__io_bru_op;
  wire [2:0] _cu__io_jmp_op;
  wire [1:0] _cu__io_wb_sel;
  wire _cu__io_wb_wen;
  wire [3:0] _cu__io_mem;
  wire [31:0] _cu__io_imm;
  wire [31:0] _if__io_out_inst;
  wire [31:0] _if__io_out_pc;
  wire _if__io_out_valid;
  reg [31:0] if_r_inst;
  reg [31:0] if_r_pc;
  reg if_r_valid;
  reg [31:0] id2exe_r_pc;
  reg id2exe_r_valid;
  reg [4:0] id2exe_r_rf_idxes_rd;
  reg [31:0] id2exe_r_rf_vals_rs1;
  reg [31:0] id2exe_r_rf_vals_rs2;
  reg [3:0] id2exe_r_alu_ctrl_calc;
  reg [1:0] id2exe_r_alu_ctrl_op1_sel;
  reg [1:0] id2exe_r_alu_ctrl_op2_sel;
  reg [2:0] id2exe_r_bru_op;
  reg [1:0] id2exe_r_wb_sel;
  reg id2exe_r_wb_wen;
  reg [3:0] id2exe_r_mem;
  reg [31:0] id2exe_r_imm;
  reg [3:0] exe2mem_r_mem;
  reg [1:0] exe2mem_r_wb_sel;
  reg exe2mem_r_wb_wen;
  reg [4:0] exe2mem_r_rf_idxes_rd;
  reg [31:0] exe2mem_r_rf_vals_rs2;
  reg [31:0] exe2mem_r_alu_out;
  reg [31:0] exe2mem_r_pc;
  reg exe2mem_r_valid;
  wire [3:0][31:0] _GEN = {{exe2mem_r_pc + 32'h4}, {_mem__io_rdata}, {exe2mem_r_alu_out}, {32'h0}};
  wire [31:0] mem2wb_l_wdata = _GEN[exe2mem_r_wb_sel];
  reg mem2wb_r_wen;
  reg [31:0] mem2wb_r_wdata;
  reg [4:0] mem2wb_r_rf_idxes_rd;
  reg mem2wb_r_valid;
  wire _GEN_0 = if_r_inst[19:15] == id2exe_r_rf_idxes_rd;
  wire _GEN_1 = if_r_inst[24:20] == id2exe_r_rf_idxes_rd;
  wire             _GEN_2 =
    (_cu__io_alu_ctrl_op1_sel == 2'h1 & _GEN_0 & (|id2exe_r_rf_idxes_rd)
     | _cu__io_alu_ctrl_op2_sel == 2'h2 & _GEN_1 & (|id2exe_r_rf_idxes_rd))
    & (id2exe_r_mem == 4'h1 | id2exe_r_mem == 4'h2 | id2exe_r_mem == 4'h3
       | id2exe_r_mem == 4'h4 | id2exe_r_mem == 4'h5);
  reg [31:0] io_dbg_wb_pc_REG;
  always @(posedge clock) begin
    if_r_inst <= _if__io_out_inst;
    if_r_pc <= _if__io_out_pc;
    if_r_valid <= _if__io_out_valid;
    id2exe_r_pc <= if_r_pc;
    id2exe_r_valid <= ~_GEN_2 & if_r_valid;
    id2exe_r_rf_idxes_rd <= if_r_inst[11:7];
    id2exe_r_rf_vals_rs1 <=
      _GEN_0 & (|id2exe_r_rf_idxes_rd) & id2exe_r_wb_wen
        ? _alu__io_out
        : if_r_inst[19:15] == exe2mem_r_rf_idxes_rd & (|exe2mem_r_rf_idxes_rd)
          & exe2mem_r_wb_wen
            ? mem2wb_l_wdata
            : _regfile__io_read_rs1_v;
    id2exe_r_rf_vals_rs2 <=
      _GEN_1 & (|id2exe_r_rf_idxes_rd) & id2exe_r_wb_wen
        ? _alu__io_out
        : if_r_inst[24:20] == exe2mem_r_rf_idxes_rd & (|exe2mem_r_rf_idxes_rd)
          & exe2mem_r_wb_wen
            ? mem2wb_l_wdata
            : _regfile__io_read_rs2_v;
    id2exe_r_alu_ctrl_calc <= _cu__io_alu_ctrl_calc;
    id2exe_r_alu_ctrl_op1_sel <= _cu__io_alu_ctrl_op1_sel;
    id2exe_r_alu_ctrl_op2_sel <= _cu__io_alu_ctrl_op2_sel;
    id2exe_r_bru_op <= _cu__io_bru_op;
    id2exe_r_wb_sel <= _cu__io_wb_sel;
    id2exe_r_wb_wen <= _cu__io_wb_wen;
    id2exe_r_mem <= _cu__io_mem;
    id2exe_r_imm <= _cu__io_imm;
    exe2mem_r_mem <= id2exe_r_mem;
    exe2mem_r_wb_sel <= id2exe_r_wb_sel;
    exe2mem_r_wb_wen <= id2exe_r_wb_wen;
    exe2mem_r_rf_idxes_rd <= id2exe_r_rf_idxes_rd;
    exe2mem_r_rf_vals_rs2 <= id2exe_r_rf_vals_rs2;
    exe2mem_r_alu_out <= _alu__io_out;
    exe2mem_r_pc <= id2exe_r_pc;
    exe2mem_r_valid <= id2exe_r_valid;
    mem2wb_r_wen <= exe2mem_r_wb_wen;
    mem2wb_r_wdata <= mem2wb_l_wdata;
    mem2wb_r_rf_idxes_rd <= exe2mem_r_rf_idxes_rd;
    mem2wb_r_valid <= exe2mem_r_valid;
    io_dbg_wb_pc_REG <= exe2mem_r_pc;
  end  // always @(posedge)
  IF if_ (
      .clock(clock),
      .reset(reset),
      .io_irom_addr(io_irom_addr),
      .io_irom_inst(io_irom_inst),
      .io_out_inst(_if__io_out_inst),
      .io_out_pc(_if__io_out_pc),
      .io_out_valid(_if__io_out_valid),
      .io_jmp_op(_cu__io_jmp_op),
      .io_jmp_imm(_cu__io_imm),
      .io_jmp_pc(if_r_pc),
      .io_jmp_rs1_v
      (if_r_inst[19:15] == id2exe_r_rf_idxes_rd & (|id2exe_r_rf_idxes_rd)
       & id2exe_r_wb_wen
         ? _alu__io_out
         : if_r_inst[19:15] == exe2mem_r_rf_idxes_rd & (|exe2mem_r_rf_idxes_rd)
           & exe2mem_r_wb_wen
             ? mem2wb_l_wdata
             : _regfile__io_read_rs1_v),
      .io_br_exe_br_pc(id2exe_r_pc),
      .io_br_exe_br_imm(id2exe_r_imm),
      .io_br_exe_br_br_flag(_bru__io_br_flag),
      .io_br_id_isBr(|_cu__io_bru_op),
      .io_ld_hazard_happened(_GEN_2),
      .io_ld_hazard_pc(if_r_pc)
  );
  CU cu_ (
      .io_inst            (if_r_inst),
      .io_alu_ctrl_calc   (_cu__io_alu_ctrl_calc),
      .io_alu_ctrl_op1_sel(_cu__io_alu_ctrl_op1_sel),
      .io_alu_ctrl_op2_sel(_cu__io_alu_ctrl_op2_sel),
      .io_bru_op          (_cu__io_bru_op),
      .io_jmp_op          (_cu__io_jmp_op),
      .io_wb_sel          (_cu__io_wb_sel),
      .io_wb_wen          (_cu__io_wb_wen),
      .io_mem             (_cu__io_mem),
      .io_imm             (_cu__io_imm)
  );
  RegFile regfile_ (
      .clock         (clock),
      .io_read_rs1_i (if_r_inst[19:15]),
      .io_read_rs1_v (_regfile__io_read_rs1_v),
      .io_read_rs2_i (if_r_inst[24:20]),
      .io_read_rs2_v (_regfile__io_read_rs2_v),
      .io_write_rd_i (mem2wb_r_rf_idxes_rd),
      .io_write_wdata(mem2wb_r_wdata),
      .io_write_wen  (mem2wb_r_wen),
      .io_write_valid(mem2wb_r_valid)
  );
  ALU alu_ (
      .io_op1_v
      ((id2exe_r_alu_ctrl_op1_sel == 2'h2 ? id2exe_r_pc : 32'h0)
       | (id2exe_r_alu_ctrl_op1_sel == 2'h1 ? id2exe_r_rf_vals_rs1 : 32'h0)),
      .io_op2_v
      ((id2exe_r_alu_ctrl_op2_sel == 2'h1 ? id2exe_r_imm : 32'h0)
       | (id2exe_r_alu_ctrl_op2_sel == 2'h2 ? id2exe_r_rf_vals_rs2 : 32'h0)),
      .io_alu_op(id2exe_r_alu_ctrl_calc),
      .io_out(_alu__io_out)
  );
  BRU bru_ (
      .io_in_bru_op(id2exe_r_bru_op),
      .io_in_rs1_v (id2exe_r_rf_vals_rs1),
      .io_in_rs2_v (id2exe_r_rf_vals_rs2),
      .io_br_flag  (_bru__io_br_flag)
  );
  MemU mem_ (
      .clock       (clock),
      .reset       (reset),
      .io_in_op    (exe2mem_r_mem),
      .io_in_addr  (exe2mem_r_alu_out),
      .io_in_wdata (exe2mem_r_rf_vals_rs2),
      .io_bus_addr (io_bus_addr),
      .io_bus_rdata(io_bus_rdata),
      .io_bus_wen  (io_bus_wen),
      .io_bus_wdata(io_bus_wdata),
      .io_valid    (exe2mem_r_valid),
      .io_rdata    (_mem__io_rdata)
  );
  assign io_dbg_wb_have_inst = mem2wb_r_valid;
  assign io_dbg_wb_pc = io_dbg_wb_pc_REG;
  assign io_dbg_wb_ena = mem2wb_r_wen;
  assign io_dbg_wb_reg = mem2wb_r_rf_idxes_rd;
  assign io_dbg_wb_value = mem2wb_r_wdata;
  assign io_dbg_inst_valid = mem2wb_r_valid;
endmodule

// VCS coverage exclude_file
module memory_262144x8 (
    input  [17:0] R0_addr,
    input         R0_en,
    R0_clk,
    output [ 7:0] R0_data,
    input  [17:0] R1_addr,
    input         R1_en,
    R1_clk,
    output [ 7:0] R1_data,
    input  [17:0] R2_addr,
    input         R2_en,
    R2_clk,
    output [ 7:0] R2_data,
    input  [17:0] R3_addr,
    input         R3_en,
    R3_clk,
    output [ 7:0] R3_data
);

  reg [7:0] Memory[0:262143];
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 8'bx;
  assign R2_data = R2_en ? Memory[R2_addr] : 8'bx;
  assign R3_data = R3_en ? Memory[R3_addr] : 8'bx;
endmodule

module IROM (
    input         clock,
    input  [15:0] io_a,
    output [31:0] io_spo
);

  wire [ 7:0] _memory_ext_R0_data;
  wire [ 7:0] _memory_ext_R1_data;
  wire [ 7:0] _memory_ext_R2_data;
  wire [ 7:0] _memory_ext_R3_data;
  wire [17:0] _GEN = {io_a, 2'h0};
  memory_262144x8 memory_ext (
      .R0_addr({io_a, 2'h0}),
      .R0_en  (1'h1),
      .R0_clk (clock),
      .R0_data(_memory_ext_R0_data),
      .R1_addr(_GEN + 18'h1),
      .R1_en  (1'h1),
      .R1_clk (clock),
      .R1_data(_memory_ext_R1_data),
      .R2_addr(_GEN + 18'h2),
      .R2_en  (1'h1),
      .R2_clk (clock),
      .R2_data(_memory_ext_R2_data),
      .R3_addr(_GEN + 18'h3),
      .R3_en  (1'h1),
      .R3_clk (clock),
      .R3_data(_memory_ext_R3_data)
  );
  assign io_spo = {
    _memory_ext_R3_data, _memory_ext_R2_data, _memory_ext_R1_data, _memory_ext_R0_data
  };
endmodule

module Bridge (
    input  [31:0] io_cpu_addr,
    output [31:0] io_cpu_rdata,
    input  [ 3:0] io_cpu_wen,
    input  [31:0] io_cpu_wdata,
    output [31:0] io_dev_0_addr,
    output [ 3:0] io_dev_0_wen,
    output [31:0] io_dev_0_wdata,
    input  [31:0] io_dev_0_rdata
);

  assign io_cpu_rdata   = io_dev_0_rdata;
  assign io_dev_0_addr  = io_cpu_addr;
  assign io_dev_0_wen   = {4{io_cpu_addr < 32'hFFFFF001}} & io_cpu_wen;
  assign io_dev_0_wdata = io_cpu_wdata;
endmodule

// VCS coverage exclude_file
module memory_262144x8_0 (
    input  [17:0] R0_addr,
    input         R0_en,
    R0_clk,
    output [ 7:0] R0_data,
    input  [17:0] R1_addr,
    input         R1_en,
    R1_clk,
    output [ 7:0] R1_data,
    input  [17:0] R2_addr,
    input         R2_en,
    R2_clk,
    output [ 7:0] R2_data,
    input  [17:0] R3_addr,
    input         R3_en,
    R3_clk,
    output [ 7:0] R3_data,
    input  [17:0] W0_addr,
    input         W0_en,
    W0_clk,
    input  [ 7:0] W0_data,
    input  [17:0] W1_addr,
    input         W1_en,
    W1_clk,
    input  [ 7:0] W1_data,
    input  [17:0] W2_addr,
    input         W2_en,
    W2_clk,
    input  [ 7:0] W2_data,
    input  [17:0] W3_addr,
    input         W3_en,
    W3_clk,
    input  [ 7:0] W3_data
);

  reg [7:0] Memory[0:262143];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1) Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1) Memory[W1_addr] <= W1_data;
    if (W2_en & 1'h1) Memory[W2_addr] <= W2_data;
    if (W3_en & 1'h1) Memory[W3_addr] <= W3_data;
  end  // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 8'bx;
  assign R2_data = R2_en ? Memory[R2_addr] : 8'bx;
  assign R3_data = R3_en ? Memory[R3_addr] : 8'bx;
endmodule

module DRAM (
    input         clock,
    input  [15:0] io_a,
    input  [ 3:0] io_we,
    input  [31:0] io_d,
    output [31:0] io_spo
);

  wire [ 7:0] _memory_ext_R0_data;
  wire [ 7:0] _memory_ext_R1_data;
  wire [ 7:0] _memory_ext_R2_data;
  wire [ 7:0] _memory_ext_R3_data;
  wire [17:0] addr = {io_a, 2'h0};
  wire [17:0] _GEN = {io_a, 2'h0};
  memory_262144x8_0 memory_ext (
      .R0_addr(addr),
      .R0_en  (1'h1),
      .R0_clk (clock),
      .R0_data(_memory_ext_R0_data),
      .R1_addr(_GEN + 18'h1),
      .R1_en  (1'h1),
      .R1_clk (clock),
      .R1_data(_memory_ext_R1_data),
      .R2_addr(_GEN + 18'h2),
      .R2_en  (1'h1),
      .R2_clk (clock),
      .R2_data(_memory_ext_R2_data),
      .R3_addr(_GEN + 18'h3),
      .R3_en  (1'h1),
      .R3_clk (clock),
      .R3_data(_memory_ext_R3_data),
      .W0_addr(addr),
      .W0_en  (io_we[3]),
      .W0_clk (clock),
      .W0_data(io_d[31:24]),
      .W1_addr(addr),
      .W1_en  (io_we[2]),
      .W1_clk (clock),
      .W1_data(io_d[23:16]),
      .W2_addr(addr),
      .W2_en  (io_we[1]),
      .W2_clk (clock),
      .W2_data(io_d[15:8]),
      .W3_addr(addr),
      .W3_en  (io_we[0]),
      .W3_clk (clock),
      .W3_data(io_d[7:0])
  );
  assign io_spo = {
    _memory_ext_R3_data, _memory_ext_R2_data, _memory_ext_R1_data, _memory_ext_R0_data
  };
endmodule

module miniRV_SoC (
    input         clock,
    reset,
    output        io_dbg_wb_have_inst,
    output [31:0] io_dbg_wb_pc,
    output        io_dbg_wb_ena,
    output [ 4:0] io_dbg_wb_reg,
    output [31:0] io_dbg_wb_value,
    output        io_dbg_inst_valid
);

  wire [31:0] _dram_io_spo;
  wire [31:0] _bridge_io_cpu_rdata;
  wire [31:0] _bridge_io_dev_0_addr;
  wire [ 3:0] _bridge_io_dev_0_wen;
  wire [31:0] _bridge_io_dev_0_wdata;
  wire [31:0] _irom_io_spo;
  wire [31:0] _cpu_core_io_irom_addr;
  wire [31:0] _cpu_core_io_bus_addr;
  wire [ 3:0] _cpu_core_io_bus_wen;
  wire [31:0] _cpu_core_io_bus_wdata;
  CPUCore cpu_core (
      .clock              (clock),
      .reset              (reset),
      .io_irom_addr       (_cpu_core_io_irom_addr),
      .io_irom_inst       (_irom_io_spo),
      .io_bus_addr        (_cpu_core_io_bus_addr),
      .io_bus_rdata       (_bridge_io_cpu_rdata),
      .io_bus_wen         (_cpu_core_io_bus_wen),
      .io_bus_wdata       (_cpu_core_io_bus_wdata),
      .io_dbg_wb_have_inst(io_dbg_wb_have_inst),
      .io_dbg_wb_pc       (io_dbg_wb_pc),
      .io_dbg_wb_ena      (io_dbg_wb_ena),
      .io_dbg_wb_reg      (io_dbg_wb_reg),
      .io_dbg_wb_value    (io_dbg_wb_value),
      .io_dbg_inst_valid  (io_dbg_inst_valid)
  );
  IROM irom (
      .clock (clock),
      .io_a  ({1'h0, _cpu_core_io_irom_addr[16:2]}),
      .io_spo(_irom_io_spo)
  );
  Bridge bridge (
      .io_cpu_addr   (_cpu_core_io_bus_addr),
      .io_cpu_rdata  (_bridge_io_cpu_rdata),
      .io_cpu_wen    (_cpu_core_io_bus_wen),
      .io_cpu_wdata  (_cpu_core_io_bus_wdata),
      .io_dev_0_addr (_bridge_io_dev_0_addr),
      .io_dev_0_wen  (_bridge_io_dev_0_wen),
      .io_dev_0_wdata(_bridge_io_dev_0_wdata),
      .io_dev_0_rdata(_dram_io_spo)
  );
  DRAM dram (
      .clock (clock),
      .io_a  ({1'h0, _bridge_io_dev_0_addr[16:2]}),
      .io_we (_bridge_io_dev_0_wen),
      .io_d  (_bridge_io_dev_0_wdata),
      .io_spo(_dram_io_spo)
  );
endmodule


// ----- 8< ----- FILE "memory_262144x8_init.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
module memory_262144x8_init ();
  initial $readmemh("./start.hex", memory_262144x8.Memory);
endmodule

bind memory_262144x8 memory_262144x8_init memory_262144x8_init ();

// ----- 8< ----- FILE "memory_262144x8_0_init.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
module memory_262144x8_0_init ();
  initial $readmemh("./start.hex", memory_262144x8_0.Memory);
endmodule

bind memory_262144x8_0 memory_262144x8_0_init memory_262144x8_0_init ();
